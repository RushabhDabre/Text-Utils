{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","role","onClick","toggleModeLight","toggleModeDark","toggleModeDanger","toggleModeSuccess","toggleModeSky","placeholder","defaultProps","abouttext","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","disabled","length","newText","toUpperCase","toLowerCase","confirmAlert","message","buttons","label","navigator","clipboard","writeText","showAlert","split","join","filter","element","Alert","height","alert","msg","App","setMode","_useState3","_useState4","setAlert","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.1afe8b91.chunk.js","sourcesContent":["import React from \"react\";\r\n// write rfc for react\r\n// write impt for proptypes\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n// import { BrowserRouter, Router, Route } from \"react-router-dom\";\r\n\r\n\r\nexport default function Navbar(props) {\r\n\r\n\r\n    return (\r\n\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} `}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"/\">\r\n                    {props.title}\r\n                </a>\r\n                <button\r\n                    className=\"navbar-toggler\"\r\n                    type=\"button\"\r\n                    data-bs-toggle=\"collapse\"\r\n                    data-bs-target=\"#navbarSupportedContent\"\r\n                    aria-controls=\"navbarSupportedContent\"\r\n                    aria-expanded=\"false\"\r\n                    aria-label=\"Toggle navigation\"\r\n                >\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\r\n                                {/* Home */}\r\n                            </a>\r\n                            {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                                Home\r\n                            </Link> */}\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"/\" >\r\n                                {/* {props.abouttext} */}\r\n                            </a>\r\n                            {/* <Link className=\"nav-link\" to=\"/About\" >\r\n                                {props.abouttext}\r\n                            </Link> */}\r\n                        </li>\r\n                    </ul>\r\n\r\n                    <div className=\"btn-toolbar  mx-4\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\r\n                        <div className=\"btn-group me-2\" role=\"group\" aria-label=\"First group\">\r\n                            <button type=\"button\" className=\"btn btn-light my-2\" onClick={props.toggleModeLight}>Light</button>\r\n                            <button type=\"button\" className=\"btn btn-dark my-2\" onClick={props.toggleModeDark}>Dark</button>\r\n                            <button type=\"button\" className=\"btn btn-danger my-2\" onClick={props.toggleModeDanger}>Danger</button>\r\n                            <button type=\"button\" className=\"btn btn-success my-2\" onClick={props.toggleModeSuccess}>Success</button>\r\n                            <button type=\"button\" className=\"btn btn-primary my-2\" onClick={props.toggleModeSky}>Sky</button>\r\n                            {/* <button type=\"button\" className=\"btn btn-light\" onClick={props.toggleMode}>Light</button>\r\n                            <button type=\"button\" className=\"btn btn-dark\" onClick={props.toggleMode}>Dark</button>\r\n                            <button type=\"button\" className=\"btn btn-danger\" onClick={props.toggleMode}>Danger</button>\r\n                            <button type=\"button\" className=\"btn btn-success\" onClick={props.toggleMode}>Success</button>\r\n                            <button type=\"button\" className=\"btn btn-info\" onClick={props.toggleMode}>Sky</button> */}\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* <div className={`form-check form-switch mx-4 text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.mode === 'dark' ? 'light' : 'dark'}Mode</label>\r\n                    </div> */}\r\n\r\n\r\n\r\n                    <form className=\"d-flex\" role=\"search\">\r\n                        <input\r\n                            className=\"form-control me-2\"\r\n                            type=\"search\"\r\n                            placeholder=\"Search\"\r\n                            aria-label=\"Search\"\r\n                        />\r\n                        <button className={`btn btn-outline-${props.mode === 'light' ? 'dark' : 'light'} text-${props.mode === 'light' ? 'dark' : 'light'}`} type=\"submit\">\r\n                            Search\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    abouttext: PropTypes.string.isRequired\r\n};\r\n\r\nNavbar.defaultProps = {\r\n    title: 'set title here',\r\n    abouttext: 'set about here'\r\n};","// rfc\r\nimport React, { useState } from 'react'\r\n\r\nimport { confirmAlert } from 'react-confirm-alert'; // Import\r\nimport 'react-confirm-alert/src/react-confirm-alert.css'; // Import css\r\n\r\nexport default function TextForm(props) {\r\n    \r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n    }\r\n\r\n\r\n    const handleLoClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n    }\r\n\r\n    const handleOnClick = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleClearClick = () => {\r\n        let newText = '';\r\n        setText(newText);\r\n    }\r\n\r\n    const confirmation = () => {\r\n        confirmAlert({\r\n            title: 'Confirm to submit',\r\n            message: 'Are you sure to do this!',\r\n            buttons: [\r\n              {\r\n                label: 'Yes',\r\n                onClick: () => handleClearClick()\r\n              },\r\n              {\r\n                label: 'No',\r\n              }\r\n            ]\r\n          });\r\n    };\r\n\r\n    const handleExtraSpace = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        navigator.clipboard.writeText(text);\r\n        props.showAlert(\"Copied to Clipboard\", \"success\");\r\n    }\r\n\r\n\r\n    const [text, setText] = useState('');\r\n    // text = \"new text\" // Wrong way to change the state\r\n    // setText = {\"new text\"} // Right way to change the state\r\n    return (\r\n        <>\r\n            <div className='container' style={{color: props.mode === 'dark' ? 'white' : 'black'}}>\r\n                <h1 >{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnClick} style={{backgroundColor: props.mode === 'dark' ? 'black' : 'white', color: props.mode === 'dark' ? 'white' : 'black'}} id=\"myBox\" rows=\"8\" ></textarea>\r\n                </div>\r\n\r\n                <button disabled={text.length===0} className={`btn btn-${props.mode} mx-1 my-1`} onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button disabled={text.length===0} className={`btn btn-${props.mode} mx-1 my-1`} onClick={handleLoClick}>Convert to Lowercase</button>\r\n                <button disabled={text.length===0} className={`btn btn-${props.mode} mx-1 my-1`} onClick={confirmation}>Clear the text</button>\r\n                {/* <button disabled={text.length===0} className={`btn btn-${props.mode} mx-1 my-1`} onClick={() => {handleClearClick(); confirmation()}} >Clear the text</button> */}\r\n                {/* <button className={`btn btn-${props.mode==='light'? 'dark':'light'} mx-1`} onClick={confirmation}>Clear the text</button> */}\r\n                <button disabled={text.length===0} className={`btn btn-${props.mode} mx-1 my-1`} onClick={handleCopy}>Copy to clipboard</button>\r\n                <button disabled={text.length===0} className={`btn btn-${props.mode} mx-1 my-1`} onClick={handleExtraSpace}>Remove Extra Space</button>\r\n\r\n                {/* <button className={`btn btn-${props.mode==='light'? 'dark':'light'} mx-1`} onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button className={`btn btn-${props.mode==='light'? 'dark':'light'} mx-1`} onClick={handleLoClick}>Convert to Lowercase</button>\r\n                <button className={`btn btn-${props.mode==='light'? 'dark':'light'} mx-1`} onClick={handleClearClick}>Clear the text</button>\r\n                <button className={`btn btn-${props.mode==='light'? 'dark':'light'} mx-1`} onClick={handleCopy}>Copy to clipboard</button> */}\r\n\r\n            </div>\r\n            <div className='container my-3' style={{color: props.mode === 'dark' ? 'white' : 'black'}}>\r\n                <h2>Your text Summary</h2>\r\n                {/* <p>{text.split(\" \").filter(function(text){return text!==\"\";}).length} Words {text.length} Characters</p> */}\r\n                <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} Words {text.length} Characters</p>\r\n                <p>{0.008 * text.split(\" \").filter((element)=>{return element.length!==0}).length} Minutes read</p>\r\n                <h2>Your text Summary</h2>\r\n                <p>{text.length>0?text:\"Nothing to preview!!\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    return (\r\n\r\n        <div style={{height: '50px'}}>\r\n            {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            {/* <strong>Holy guacamole!</strong> You should check in on some of those fields below. */}\r\n            <strong>{props.alert.msg}</strong>\r\n            {/* <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n        </div>}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Alert;\r\n","import React, { useState } from 'react' //imrs\nimport './App.css';\n\n\n\n// import { BrowserRouter, Router, Route } from \"react-router-dom\";\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n// import About from './components/Aboutt';\n\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route\n// } from \"react-router-dom\";\n\n// import Navbar from './components/ReactNavbar'\n\n\nfunction App() {\n  const [mode, setMode] = useState('info'); //wether dark mode is enabled or not\n  const [alert, setAlert] = useState(null); //wether dark mode is enabled or not\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  // const toggleMode = ()=>{\n  //   if(mode === 'light'){\n  //     setMode('dark');\n  //     document.body.style.backgroundColor = \"#212529\";\n  //     showAlert(\"Dark mode has been enabled\", \"success\");\n  //   }else{\n  //     setMode('light')\n  //     document.body.style.backgroundColor = \"white\";\n  //     showAlert(\"Light mode has been enabled\", \"success\");\n  //   }\n  // }\n\n  const toggleModeLight = () => {\n    setMode('info');\n    document.body.style.backgroundColor = \"white\";\n    showAlert(\"Light mode has been enabled\", \"success\");\n  }\n\n  const toggleModeDark = () => {\n    setMode('dark');\n    document.body.style.backgroundColor = \"#153462\";\n    showAlert(\"Dark mode has been enabled\", \"success\");\n  }\n\n  const toggleModeDanger = () => {\n    setMode('danger');\n    document.body.style.backgroundColor = \"#FFD4D4\";\n    showAlert(\"Danger mode has been enabled\", \"success\");\n  }\n\n  const toggleModeSuccess = () => {\n    setMode('success');\n    document.body.style.backgroundColor = \"#9DF1DF\";\n    showAlert(\"Success mode has been enabled\", \"success\");\n  }\n\n  const toggleModeSky = () => {\n    setMode('primary');\n    document.body.style.backgroundColor = \"#BCCEF8\";\n    showAlert(\"Sky mode has been enabled\", \"success\");\n  }\n\n  return (\n    <>\n      {/* <React.StrictMode/> */}\n      {/* <Navbar title = \"TextUtiles\" abouttext=\"About\"/> */}\n      {/* <Navbar /> */}\n      {/* <Router> */}\n      <Navbar title='TextUtils' mode={mode} toggleModeDark={toggleModeDark} toggleModeLight={toggleModeLight} toggleModeDanger={toggleModeDanger} toggleModeSuccess={toggleModeSuccess} toggleModeSky={toggleModeSky} abouttext=\"About\" />\n      <Alert alert={alert} />\n\n\n      {/* <Alert alert=\"This is Rushabh Coding!\" /> */}\n      {/* <div className='Container my-3 mx-5' >\n        <Routes>\n        <Route path=\"/About\" element={<About />} />\n        <Route path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode} />} />\n        </Routes>\n      </div > */}\n      <div className='Container my-3 mx-5' >\n        <TextForm showAlert={showAlert} heading=\"TextUtils - Word Counter, Character Counter, Remove Extra Spaces\" mode={mode} />\n      </div >\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}